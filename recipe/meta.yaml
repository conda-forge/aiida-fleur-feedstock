{% set name = "aiida-fleur" %}
{% set version = "1.3.1" %}
{% set build = 4 %}
{% set name_code = name + ".code" %}

package:
  name: {{ name }}.meta
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/aiida-fleur-{{ version }}.tar.gz
  sha256: 44abdc272d80861942fc0a7f7660541a703e4a45750aff93011477e9c1acc79c

build:
  number: {{ build }}
  noarch: python

requirements:
  run:
  - {{ pin_subpackage(name, exact=True) }}
  - {{ pin_subpackage(name_code, exact=True) }}

outputs:
  - name:  {{ name }}
    build:
      noarch: python
      entry_points:
        - aiida-fleur = aiida_fleur.cmdline:cmd_root
      script: 'python -m pip install . --no-deps --ignore-installed -vvv '
    requirements:
      host:
        - pip
        - python >=3.7
        - reentry
      run:
        - aiida-core.atomic_tools >=1.3.0,<2
        - future
        - lxml >=4.8,<5
        - markupsafe <2.1.0
        - masci-tools >=0.9.1,<1
        - more-itertools
        - numpy >=1.16.4,<2
        - pyhull
        - python >=3.7
        - sqlalchemy <1.4
        - sympy
      run_constrained:
        - {{ pin_subpackage(name_code, exact=True) }}
    test:
      imports:
        - aiida_fleur
      commands:
        - pip check
      requires:
        - pip

  - name: {{ name_code }}
    build:
      noarch: python
    requirements:
      run:
        - fleur >=1,<7
    test:
      commands:
        - which fleur_MPI

about:
  home: https://github.com/JuDFTteam/aiida-fleur
  summary: Python FLEUR simulation package containing an AiiDA Plugin for running the FLEUR-code and its input generator. Plus some workflows and utility
  license: MIT
  license_file: LICENSE

extra:
  recipe-maintainers:
    - chrisjsewell
